React Hook Form
https://www.youtube.com/playlist?list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf

https://github.com/Annie-Huang/react-hook-form/tree/master/examples/V7
https://github.com/Annie-Huang/react-hook-form-tutorial

https://react-hook-form.com/get-started/
https://react-hook-form.com/get-started/#IntegratingControlledInputs
https://react-hook-form.com/api/useform     << Got info of 'shouldUnregister' and 'mode'

https://codesandbox.io/s/pensive-jepsen-lqyk7
https://codesandbox.io/s/brave-elgamal-2m1kq

React Hook Form - Get Started       (https://www.youtube.com/watch?v=RkXv4AXXC_4)
React Hook Form V7 - Get Started    (https://www.youtube.com/watch?v=DN8v7_RbVlc&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=1&t=93s)

===========================================================
PS C:\react> npx create-react-app react-hook-form-tutorial --use-npm --template typescript
PS C:\react\react-hook-form-tutorial> npm install react-hook-form

mode:
---------
onSubmit is the default and it's the closest to the native behavior:
    no validation when user actually starts to interact with the form until they actually pressing the submit button.
    And then the error will be attached.
Most of the time you would want this one, it basically do this:
    First time, errors will only be attached when you do onSubmit. Subsequently, on change of each field.

Get value for each fields in the form
---------------------------------------
watch
handleSubmit

watch()
----------
1. conditionally render stuff,
2. show something in the view.

Advantage of using the library
--------------------------------
Some behavior, e.g. if the form failed on some fields, on submit, will auto reland the cursor to the first error field. This is handled in this library already

common validation:
------------------------
{ required: true }
{ required: true, maxLength: 4 }
{ valueAsNumber: true }         <<< all <input type='number'> will store as string when it comes in, this will change it to number in the data.

validation in 2 ways:
----------------------
        <label htmlFor='firstName'>First Name:</label>
        <input {...register('firstName', { required: true })} id='First Name' />
        {errors.firstName && <p className='error'>This is required</p>}

        ----------

        <label htmlFor='firstName'>First Name:</label>
        <input
          {...register('firstName', { required: 'This is required' })}
          id='First Name'
        />
        {errors.firstName && (
          <p className='error'>{errors.firstName.message}</p>
        )}

        <input
          {...register('lastName', {
            required: 'This is required',
            maxLength: {
              value: 4,
              message: 'Min length is 4',
            },
          })}
          id='Last Name'
        />
        {errors.lastName && <p className='error'>{errors.lastName.message}</p>}

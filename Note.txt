React Hook Form
https://www.youtube.com/playlist?list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf

https://github.com/Annie-Huang/react-hook-form/tree/master/examples/V7
https://github.com/Annie-Huang/react-hook-form-tutorial

https://react-hook-form.com/get-started/
https://react-hook-form.com/get-started/#IntegratingControlledInputs
https://react-hook-form.com/api/useform                     << Got info of 'shouldUnregister' and 'mode'
https://react-hook-form.com/api/useform/register            << Check the option section.
https://react-hook-form.com/api/useform/formstate
https://react-hook-form.com/api/usecontroller/controller

https://github.com/Annie-Huang/react-hook-form/tree/master/examples     << Got the whole code sandbox list.
https://codesandbox.io/s/pensive-jepsen-lqyk7
https://codesandbox.io/s/brave-elgamal-2m1kq
https://codesandbox.io/s/react-hook-form-v7-controller-5h1q5    << control code base


React Hook Form - Get Started           (https://www.youtube.com/watch?v=RkXv4AXXC_4)
React Hook Form V7 - Get Started        (https://www.youtube.com/watch?v=DN8v7_RbVlc&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=1)
Progressively improve form              (https://www.youtube.com/watch?v=PGqbe3TDlrE&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=2)
    - This one got useFieldArray info
React Hook Form - Controller            (https://www.youtube.com/watch?v=N2UNk_UCVyA&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=14)
React Hook Form - useForm: register     (https://www.youtube.com/watch?v=JFIpCoajYkA&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=4)
React Hook Form - useForm: watch        (https://www.youtube.com/watch?v=3qLd69WMqKk&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=5)
React Hook Form - useForm: formState    (https://www.youtube.com/watch?v=4kzd572NbkM&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=6)
react hook form - useForm: handleSubmit (https://www.youtube.com/watch?v=KzcPKB9SOEk&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=11)
React Hook Form - useForm: setValue     (https://www.youtube.com/watch?v=qpv51sCH3fI&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=7)
React Hook Form - useForm: reset        (https://www.youtube.com/watch?v=qmCLBjyPwVk&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=8)
React Hook Form - useForm: trigger      (https://www.youtube.com/watch?v=-bcyJCDjksE&list=PL03g4H_exuTppOgtY-45oWvN79rvJIKzf&index=9)

######################################################################################################################################################################

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/basicValidation.tsx
    - This is pattern matching validation.
        <input
          type="text"
          {...register('email', {
            required: true,
            pattern:
              /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
          })}
        />

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/customMaskedInputWithController.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V6/custom-masked-input.tsx
    - This is with 'react-input-mask'

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/customValidation.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/disableNativeValidation.tsx
https://react-hook-form.com/api/useform/register
    - This is with validate syntax
          <input
            defaultValue={initialValues.age}
            placeholder="0"
            type="text"
            {...register('age', {
              validate: {
                positiveNumber: (value) => parseFloat(value) > 0,
                lessThanHundred: (value) => parseFloat(value) < 200,
              },
            })}
          />
          <input
            name="email"
            type="email"
            ref={register({
              required: 'Email is required',
              validate: (value) =>
                value.includes('@') || "Email must include '@' symbol",
            })}
          />
        <input
          {...register("test1", {
            validate: {
              positive: v => parseInt(v) > 0 || 'should be greater than 0',
              lessThanTen: v => parseInt(v) < 10 || 'should be lower than 10',
              // you can do asynchronous validation as well
              checkUrl: async () => await fetch() || 'error message',  // JS only: <p>error message</p> TS only support string
              messages: v => !v && ['test', 'test2']
            }
          })}
        />
          register('lastName2', {
            maxLength: {
              value: 5,
              message: 'Max length is 5',
            },
            validate: async (value) => {
              console.log('lastName2 value=', value);
              // return value === 'bill';
              return value === 'bill' || 'The lastName2 has to be bill';
            },
          });

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/getValuesCompareFields.tsx
    - This one is needing to compare with another field value
        <input
          name="passwordConfirmation"
          ref={register({
            required: 'Please confirm password!',
            validate: {
              matchesPreviousPassword: (value) => {
                const { password } = getValues();
                return password === value || 'Passwords should match!';
              },
            },
          })}
        />

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/normalizeField.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/parseFormatInputValues.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/customMaskedInputWithController.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/typescript/Control.tsx
https://codesandbox.io/s/react-hook-form-v7-controller-5h1q5
https://codesandbox.io/s/build-react-hook-form-controller-component-from-scratch-zl17q     << This is not really apply because it's building Controller from scratch
https://react-hook-form.com/api/usecontroller/controller
    - This one got Controller syntax. and it use TextField in '@material-ui/core'
      <Controller
        name="number"
        render={({ value, onChange }) => (
          <input
            type="number"
            value={value}
            onChange={(e) => onChange(parseInt(e.target.value, 10))}
          />
        )}
        control={control}
        defaultValue={0}
      />
    <Controller
      control={control}
      name="test"
      render={({
        field: { onChange, onBlur, value, name, ref },
        fieldState: { invalid, isTouched, isDirty, error },
        formState,
      }) => (
        <Checkbox
          onBlur={onBlur} // notify when input is touched
          onChange={onChange} // send value to hook form
          checked={value}
          inputRef={ref}
        />
      )}
    />
    <Controller
      render={({
        field: { onChange, onBlur, value, name, ref },
        fieldState: { invalid, isTouched, isDirty, error },
      }) => (
        <TextField
          value={value}
          onChange={onChange} // send value to hook form
          onBlur={onBlur} // notify when input is touched
          inputRef={ref} // wire up the input ref
        />
      )}
      name="TextField"
      control={control}
      rules={{ required: true }}
    />


https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/getValuesCompareFields.tsx
https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/setValue.tsx
    - This one has getValues and setValue

https://github.com/Annie-Huang/react-hook-form/blob/master/examples/V7/typescript/SubmitHandler.tsx
    - This one has handleSubmit type

######################################################################################################################################################################

PS C:\react> npx create-react-app react-hook-form-tutorial --use-npm --template typescript
PS C:\react\react-hook-form-tutorial> npm install react-hook-form

mode:
---------
onSubmit is the default and it's the closest to the native behavior:
    no validation when user actually starts to interact with the form until they actually pressing the submit button.
    And then the error will be attached.
Most of the time you would want this one, it basically do this:
    First time, errors will only be attached when you do onSubmit. Subsequently, on change of each field.

Get value for each fields in the form
---------------------------------------
watch
handleSubmit

watch()
----------
1. conditionally render stuff,
2. show something in the view.

Advantage of using the library
--------------------------------
Some behavior, e.g. if the form failed on some fields, on submit, will auto reland the cursor to the first error field. This is handled in this library already

common validation:
------------------------
{ required: true }
{ required: true, maxLength: 4 }
{ valueAsNumber: true }         <<< all <input type='number'> will store as string when it comes in, this will change it to number in the data.

validation in 2 ways:
----------------------
        <label htmlFor='firstName'>First Name:</label>
        <input {...register('firstName', { required: true })} id='First Name' />
        {errors.firstName && <p className='error'>This is required</p>}

        ----------

        <label htmlFor='firstName'>First Name:</label>
        <input
          {...register('firstName', { required: 'This is required' })}
          id='First Name'
        />
        {errors.firstName && (
          <p className='error'>{errors.firstName.message}</p>
        )}

        <input
          {...register('lastName', {
            required: 'This is required',
            maxLength: {
              value: 4,
              message: 'Min length is 4',
            },
          })}
          id='Last Name'
        />
        {errors.lastName && <p className='error'>{errors.lastName.message}</p>}
